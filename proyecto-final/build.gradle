
plugins {
    id 'java'
    id 'com.google.protobuf' version '0.9.4' //plugin para incluir la compilación de gRPC, ver: https://github.com/grpc/grpc-java#generated-code
    id 'idea' //plugins para la integración con el IDEA.
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = '21'
}


repositories {
    mavenCentral()
}

application{
    mainClass = 'app.Main'
}

ext{
    openapi = "6.1.3"
}


dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation 'org.freemarker:freemarker-gae:2.3.34'

    implementation'io.javalin:javalin:6.4.0'
    implementation'org.slf4j:slf4j-simple:2.0.11'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2' // JSON handling
    implementation 'org.thymeleaf:thymeleaf:3.1.1.RELEASE'
    implementation("io.javalin:javalin-rendering:6.4.0")

    implementation 'org.slf4j:slf4j-simple:2.0.7'

    implementation 'org.jasypt:jasypt:1.9.3'
    implementation("com.fasterxml.jackson.core:jackson-core:2.15.2")
    implementation('com.fasterxml.jackson.core:jackson-databind:2.15.2')
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.15.2")
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.3'


    annotationProcessor("io.javalin.community.openapi:openapi-annotation-processor:$openapi")
    implementation("io.javalin.community.openapi:javalin-openapi-plugin:$openapi") // for /openapi route with JSON scheme
    implementation("io.javalin.community.openapi:javalin-swagger-plugin:$openapi") // for Swagger UI
    implementation("io.javalin.community.openapi:javalin-redoc-plugin:$openapi") // for ReDoc UI

    //mongo related dependencys
    implementation 'org.mongodb:mongodb-driver-sync:5.3.0'
    implementation 'org.springframework.data:spring-data-mongodb:3.4.5'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // usa Jackson para manejar el JSON


    //qr generator dependencies
    implementation 'com.google.zxing:core:3.5.2'
    implementation 'com.google.zxing:javase:3.5.2'

    //grpc
    //Librerías necesarias para para implementar gRPC y Protobuf, ver: https://github.com/grpc/grpc-java
    runtimeOnly 'io.grpc:grpc-netty-shaded:1.62.2'
    implementation 'io.grpc:grpc-protobuf:1.62.2'
    implementation 'io.grpc:grpc-stub:1.62.2'
    implementation 'io.grpc:grpc-services:1.62.2' // Para habilitar la reflexión del servidor https://github.com/grpc/grpc-java/blob/master/documentation/server-reflection-tutorial.md#enable-server-reflection
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+
    implementation 'com.google.protobuf:protobuf-java:3.25.3'

}

test {
    useJUnitPlatform()
}

run {
    standardInput = System.in
}

shadowJar{
    archiveBaseName.set("app")
    archiveClassifier.set('')
    archiveVersion.set('')
}

/**
 * tarea necesaria para heroku si optamos por la tarea de Shadowjar
 * en el archivo Procfile debe estar el siguiente comando:
 * web: java -jar build/libs/app.jar
 */
task stage {
    dependsOn shadowJar
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.62.2'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }

    //generatedFilesBaseDir = "$projectDir/generated"
}


//Tareas para integrar con el
clean {
    delete protobuf.generatedFilesBaseDir
}

idea {
    module {
        // proto files and generated Java files are automatically added as
        // source dirs.
        // If you have additional sources, add them here:
        sourceDirs += file("src/generated");
    }
}
